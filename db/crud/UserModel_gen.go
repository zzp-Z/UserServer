// Code generated by goctl. DO NOT EDIT.

package crud

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserServerUserIdPrefix    = "cache:userServer:user:id:"
	cacheUserServerUserEmailPrefix = "cache:userServer:user:email:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*User, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id           uint64         `db:"id"`            // ID 字段
		CreatedAt    time.Time      `db:"created_at"`    // 默认值是当前时间
		UpdatedAt    time.Time      `db:"updated_at"`    // 默认值是当前时间，并且每次数据更新都会更新这个值
		DeletedAt    sql.NullTime   `db:"deleted_at"`    // 当数据被软删除的时候，这个字段会被设置为当前时间
		Username     string         `db:"username"`      // 不唯一，不允许为 NULL
		HashPassword string         `db:"hash_password"` // hash后的密码
		Bio          sql.NullString `db:"bio"`           // 用户的简介字段
		Quotes       sql.NullString `db:"quotes"`        // 个人语录
		Email        string         `db:"email"`         // 邮箱字段
		MoodId       sql.NullInt64  `db:"mood_id"`       // 心情字段
		Status       string         `db:"status"`        // 默认值是 0，0启用；1：禁用
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userServerUserEmailKey := fmt.Sprintf("%s%v", cacheUserServerUserEmailPrefix, data.Email)
	userServerUserIdKey := fmt.Sprintf("%s%v", cacheUserServerUserIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userServerUserEmailKey, userServerUserIdKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id uint64) (*User, error) {
	userServerUserIdKey := fmt.Sprintf("%s%v", cacheUserServerUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, userServerUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	userServerUserEmailKey := fmt.Sprintf("%s%v", cacheUserServerUserEmailPrefix, email)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userServerUserEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	userServerUserEmailKey := fmt.Sprintf("%s%v", cacheUserServerUserEmailPrefix, data.Email)
	userServerUserIdKey := fmt.Sprintf("%s%v", cacheUserServerUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.Username, data.HashPassword, data.Bio, data.Quotes, data.Email, data.MoodId, data.Status)
	}, userServerUserEmailKey, userServerUserIdKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userServerUserEmailKey := fmt.Sprintf("%s%v", cacheUserServerUserEmailPrefix, data.Email)
	userServerUserIdKey := fmt.Sprintf("%s%v", cacheUserServerUserIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DeletedAt, newData.Username, newData.HashPassword, newData.Bio, newData.Quotes, newData.Email, newData.MoodId, newData.Status, newData.Id)
	}, userServerUserEmailKey, userServerUserIdKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserServerUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
