// Code generated by goctl. DO NOT EDIT.

package crud

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	followFieldNames          = builder.RawFieldNames(&Follow{})
	followRows                = strings.Join(followFieldNames, ",")
	followRowsExpectAutoSet   = strings.Join(stringx.Remove(followFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	followRowsWithPlaceHolder = strings.Join(stringx.Remove(followFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserServerFollowIdPrefix                   = "cache:userServer:follow:id:"
	cacheUserServerFollowFollowerIdFolloweeIdPrefix = "cache:userServer:follow:followerId:followeeId:"
)

type (
	followModel interface {
		Insert(ctx context.Context, data *Follow) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Follow, error)
		FindOneByFollowerIdFolloweeId(ctx context.Context, followerId uint64, followeeId uint64) (*Follow, error)
		Update(ctx context.Context, data *Follow) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultFollowModel struct {
		sqlc.CachedConn
		table string
	}

	Follow struct {
		Id         uint64    `db:"id"`          // 主键 ID
		FollowerId uint64    `db:"follower_id"` // 关注者的用户 ID
		FolloweeId uint64    `db:"followee_id"` // 被关注者的用户 ID
		CreatedAt  time.Time `db:"created_at"`  // 关注的时间
	}
)

func newFollowModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFollowModel {
	return &defaultFollowModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`follow`",
	}
}

func (m *defaultFollowModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userServerFollowFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserServerFollowFollowerIdFolloweeIdPrefix, data.FollowerId, data.FolloweeId)
	userServerFollowIdKey := fmt.Sprintf("%s%v", cacheUserServerFollowIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userServerFollowFollowerIdFolloweeIdKey, userServerFollowIdKey)
	return err
}

func (m *defaultFollowModel) FindOne(ctx context.Context, id uint64) (*Follow, error) {
	userServerFollowIdKey := fmt.Sprintf("%s%v", cacheUserServerFollowIdPrefix, id)
	var resp Follow
	err := m.QueryRowCtx(ctx, &resp, userServerFollowIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", followRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowModel) FindOneByFollowerIdFolloweeId(ctx context.Context, followerId uint64, followeeId uint64) (*Follow, error) {
	userServerFollowFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserServerFollowFollowerIdFolloweeIdPrefix, followerId, followeeId)
	var resp Follow
	err := m.QueryRowIndexCtx(ctx, &resp, userServerFollowFollowerIdFolloweeIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `follower_id` = ? and `followee_id` = ? limit 1", followRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, followerId, followeeId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowModel) Insert(ctx context.Context, data *Follow) (sql.Result, error) {
	userServerFollowFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserServerFollowFollowerIdFolloweeIdPrefix, data.FollowerId, data.FolloweeId)
	userServerFollowIdKey := fmt.Sprintf("%s%v", cacheUserServerFollowIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, followRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FollowerId, data.FolloweeId)
	}, userServerFollowFollowerIdFolloweeIdKey, userServerFollowIdKey)
	return ret, err
}

func (m *defaultFollowModel) Update(ctx context.Context, newData *Follow) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userServerFollowFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserServerFollowFollowerIdFolloweeIdPrefix, data.FollowerId, data.FolloweeId)
	userServerFollowIdKey := fmt.Sprintf("%s%v", cacheUserServerFollowIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, followRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.FollowerId, newData.FolloweeId, newData.Id)
	}, userServerFollowFollowerIdFolloweeIdKey, userServerFollowIdKey)
	return err
}

func (m *defaultFollowModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserServerFollowIdPrefix, primary)
}

func (m *defaultFollowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", followRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFollowModel) tableName() string {
	return m.table
}
