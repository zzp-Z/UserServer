// Code generated by goctl. DO NOT EDIT.
// Source: UserServer.proto

package userroleserver

import (
	"context"

	"github.com/zzp-Z/UserServer/user_server"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserRoleRequest           = user_server.AddUserRoleRequest
	AddUserRoleResponse          = user_server.AddUserRoleResponse
	AuthenticateRequest          = user_server.AuthenticateRequest
	AuthenticateResponse         = user_server.AuthenticateResponse
	ChangePasswordRequest        = user_server.ChangePasswordRequest
	ChangePasswordResponse       = user_server.ChangePasswordResponse
	CheckUserRoleRequest         = user_server.CheckUserRoleRequest
	CheckUserRoleResponse        = user_server.CheckUserRoleResponse
	CreateRoleRequest            = user_server.CreateRoleRequest
	CreateRoleResponse           = user_server.CreateRoleResponse
	DeleteRoleRequest            = user_server.DeleteRoleRequest
	DeleteRoleResponse           = user_server.DeleteRoleResponse
	DeleteUserRequest            = user_server.DeleteUserRequest
	DeleteUserResponse           = user_server.DeleteUserResponse
	DeleteUserRoleRequest        = user_server.DeleteUserRoleRequest
	DeleteUserRoleResponse       = user_server.DeleteUserRoleResponse
	FollowRequest                = user_server.FollowRequest
	FollowResponse               = user_server.FollowResponse
	GetFollowersListRequest      = user_server.GetFollowersListRequest
	GetFollowersListResponse     = user_server.GetFollowersListResponse
	GetFollowingListRequest      = user_server.GetFollowingListRequest
	GetFollowingListResponse     = user_server.GetFollowingListResponse
	GetRoleListRequest           = user_server.GetRoleListRequest
	GetRoleListResponse          = user_server.GetRoleListResponse
	GetRoleRequest               = user_server.GetRoleRequest
	GetRoleResponse              = user_server.GetRoleResponse
	GetRoleUsersRequest          = user_server.GetRoleUsersRequest
	GetRoleUsersResponse         = user_server.GetRoleUsersResponse
	GetUserInfoByIdRequest       = user_server.GetUserInfoByIdRequest
	GetUserRolesRequest          = user_server.GetUserRolesRequest
	GetUserRolesResponse         = user_server.GetUserRolesResponse
	RegisterRequest              = user_server.RegisterRequest
	RegisterResponse             = user_server.RegisterResponse
	UnfollowRequest              = user_server.UnfollowRequest
	UnfollowResponse             = user_server.UnfollowResponse
	UpdateRoleRequest            = user_server.UpdateRoleRequest
	UpdateRoleResponse           = user_server.UpdateRoleResponse
	UpdateUserRequest            = user_server.UpdateUserRequest
	UpdateUserResponse           = user_server.UpdateUserResponse
	UserNonSensitiveInfoResponse = user_server.UserNonSensitiveInfoResponse
	UserSensitiveInfoResponse    = user_server.UserSensitiveInfoResponse

	UserRoleServer interface {
		// 获取用户角色列表
		GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
		// 添加用户角色
		AddUserRole(ctx context.Context, in *AddUserRoleRequest, opts ...grpc.CallOption) (*AddUserRoleResponse, error)
		// 删除用户角色
		DeleteUserRole(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*DeleteUserRoleResponse, error)
		// 获取角色用户列表
		GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error)
		// 检查用户角色
		CheckUserRole(ctx context.Context, in *CheckUserRoleRequest, opts ...grpc.CallOption) (*CheckUserRoleResponse, error)
	}

	defaultUserRoleServer struct {
		cli zrpc.Client
	}
)

func NewUserRoleServer(cli zrpc.Client) UserRoleServer {
	return &defaultUserRoleServer{
		cli: cli,
	}
}

// 获取用户角色列表
func (m *defaultUserRoleServer) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	client := user_server.NewUserRoleServerClient(m.cli.Conn())
	return client.GetUserRoles(ctx, in, opts...)
}

// 添加用户角色
func (m *defaultUserRoleServer) AddUserRole(ctx context.Context, in *AddUserRoleRequest, opts ...grpc.CallOption) (*AddUserRoleResponse, error) {
	client := user_server.NewUserRoleServerClient(m.cli.Conn())
	return client.AddUserRole(ctx, in, opts...)
}

// 删除用户角色
func (m *defaultUserRoleServer) DeleteUserRole(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*DeleteUserRoleResponse, error) {
	client := user_server.NewUserRoleServerClient(m.cli.Conn())
	return client.DeleteUserRole(ctx, in, opts...)
}

// 获取角色用户列表
func (m *defaultUserRoleServer) GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error) {
	client := user_server.NewUserRoleServerClient(m.cli.Conn())
	return client.GetRoleUsers(ctx, in, opts...)
}

// 检查用户角色
func (m *defaultUserRoleServer) CheckUserRole(ctx context.Context, in *CheckUserRoleRequest, opts ...grpc.CallOption) (*CheckUserRoleResponse, error) {
	client := user_server.NewUserRoleServerClient(m.cli.Conn())
	return client.CheckUserRole(ctx, in, opts...)
}
