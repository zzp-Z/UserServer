// Code generated by goctl. DO NOT EDIT.
// Source: UserServer.proto

package userserver

import (
	"context"

	"github.com/zzp-Z/UserServer/user_server"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthenticateRequest          = user_server.AuthenticateRequest
	AuthenticateResponse         = user_server.AuthenticateResponse
	ChangePasswordRequest        = user_server.ChangePasswordRequest
	ChangePasswordResponse       = user_server.ChangePasswordResponse
	DeleteUserRequest            = user_server.DeleteUserRequest
	DeleteUserResponse           = user_server.DeleteUserResponse
	FollowRequest                = user_server.FollowRequest
	FollowResponse               = user_server.FollowResponse
	GetFollowersListRequest      = user_server.GetFollowersListRequest
	GetFollowersListResponse     = user_server.GetFollowersListResponse
	GetFollowingListRequest      = user_server.GetFollowingListRequest
	GetFollowingListResponse     = user_server.GetFollowingListResponse
	GetUserInfoByIdRequest       = user_server.GetUserInfoByIdRequest
	RegisterRequest              = user_server.RegisterRequest
	RegisterResponse             = user_server.RegisterResponse
	UnfollowRequest              = user_server.UnfollowRequest
	UnfollowResponse             = user_server.UnfollowResponse
	UpdateUserRequest            = user_server.UpdateUserRequest
	UpdateUserResponse           = user_server.UpdateUserResponse
	UserNonSensitiveInfoResponse = user_server.UserNonSensitiveInfoResponse
	UserSensitiveInfoResponse    = user_server.UserSensitiveInfoResponse

	UserServer interface {
		// 注册新用户
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 验证用户密码（用途包括不限于“登录”，修改密码前的验证，修改信息前的验证等）
		Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
		// 获取用户信息（包含敏感信息）
		GetUserSensitive(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*UserSensitiveInfoResponse, error)
		// 获取用户信息（不包含敏感信息）
		GetUserNonSensitive(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*UserNonSensitiveInfoResponse, error)
		// 更新用户信息
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		// 修改密码
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
		// 删除用户
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		// 关注用户
		Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
		// 取消关注用户
		Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error)
		// 获取关注列表
		GetFollowingList(ctx context.Context, in *GetFollowingListRequest, opts ...grpc.CallOption) (*GetFollowingListResponse, error)
		// 获取被关注列表
		GetFollowersList(ctx context.Context, in *GetFollowersListRequest, opts ...grpc.CallOption) (*GetFollowersListResponse, error)
	}

	defaultUserServer struct {
		cli zrpc.Client
	}
)

func NewUserServer(cli zrpc.Client) UserServer {
	return &defaultUserServer{
		cli: cli,
	}
}

// 注册新用户
func (m *defaultUserServer) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 验证用户密码（用途包括不限于“登录”，修改密码前的验证，修改信息前的验证等）
func (m *defaultUserServer) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.Authenticate(ctx, in, opts...)
}

// 获取用户信息（包含敏感信息）
func (m *defaultUserServer) GetUserSensitive(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*UserSensitiveInfoResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.GetUserSensitive(ctx, in, opts...)
}

// 获取用户信息（不包含敏感信息）
func (m *defaultUserServer) GetUserNonSensitive(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*UserNonSensitiveInfoResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.GetUserNonSensitive(ctx, in, opts...)
}

// 更新用户信息
func (m *defaultUserServer) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

// 修改密码
func (m *defaultUserServer) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

// 删除用户
func (m *defaultUserServer) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

// 关注用户
func (m *defaultUserServer) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.Follow(ctx, in, opts...)
}

// 取消关注用户
func (m *defaultUserServer) Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.Unfollow(ctx, in, opts...)
}

// 获取关注列表
func (m *defaultUserServer) GetFollowingList(ctx context.Context, in *GetFollowingListRequest, opts ...grpc.CallOption) (*GetFollowingListResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.GetFollowingList(ctx, in, opts...)
}

// 获取被关注列表
func (m *defaultUserServer) GetFollowersList(ctx context.Context, in *GetFollowersListRequest, opts ...grpc.CallOption) (*GetFollowersListResponse, error) {
	client := user_server.NewUserServerClient(m.cli.Conn())
	return client.GetFollowersList(ctx, in, opts...)
}
