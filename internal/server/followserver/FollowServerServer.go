// Code generated by goctl. DO NOT EDIT.
// Source: UserServer.proto

package server

import (
	"context"

	"github.com/zzp-Z/UserServer/internal/logic/followserver"
	"github.com/zzp-Z/UserServer/internal/svc"
	"github.com/zzp-Z/UserServer/user_server"
)

type FollowServerServer struct {
	svcCtx *svc.ServiceContext
	user_server.UnimplementedFollowServerServer
}

func NewFollowServerServer(svcCtx *svc.ServiceContext) *FollowServerServer {
	return &FollowServerServer{
		svcCtx: svcCtx,
	}
}

// 关注用户
func (s *FollowServerServer) Follow(ctx context.Context, in *user_server.FollowRequest) (*user_server.FollowResponse, error) {
	l := followserverlogic.NewFollowLogic(ctx, s.svcCtx)
	return l.Follow(in)
}

// 取消关注用户
func (s *FollowServerServer) Unfollow(ctx context.Context, in *user_server.UnfollowRequest) (*user_server.UnfollowResponse, error) {
	l := followserverlogic.NewUnfollowLogic(ctx, s.svcCtx)
	return l.Unfollow(in)
}

// 获取关注列表
func (s *FollowServerServer) GetFollowingList(ctx context.Context, in *user_server.GetFollowingListRequest) (*user_server.GetFollowingListResponse, error) {
	l := followserverlogic.NewGetFollowingListLogic(ctx, s.svcCtx)
	return l.GetFollowingList(in)
}

// 获取被关注列表
func (s *FollowServerServer) GetFollowersList(ctx context.Context, in *user_server.GetFollowersListRequest) (*user_server.GetFollowersListResponse, error) {
	l := followserverlogic.NewGetFollowersListLogic(ctx, s.svcCtx)
	return l.GetFollowersList(in)
}
